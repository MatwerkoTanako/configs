<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
	config = "scripts/ai/guardian/bt_config.kv3"
	root =
	{
		type = "decorator_bot_service"
		memory_to_expire =
		[
			{
				key = "ShortTermAttackMemory"
				time = 0.7
				distance = 0
			},
			{
				key = "LongTermMemory"
				time = 10
				distance = 500
			},
			{
				key = "ShortTermInvestigateMemory"
				time = 3
				distance = 200
			}
		]
		
		child =
		{
			type = "decorator_buy_service"
			output = "ShouldBuy"
			child =
			{
				type = "parallel"
				children =
				[
					{
						type = "decorator_repeat"
						child =
						{
							type = "parallel"
							children =
							[
								// memorize enemies through vision
								{
									type = "subtree"
									file = "scripts/ai/botComp/Memory_/bt_memorize_enemies_vision.kv3"
									name = "MemorizeEnemiesVision"
								},
								// memorize noises happening right now
								{
									type = "subtree"
									file = "scripts/ai/botComp/Memory_/bt_memorize_noises.kv3"
									name = "MemorizeNoises"
								},
								// record the nearest memorized event to investigate
								{
									type = "subtree"
									file = "scripts/ai/botComp/Memory_/bt_memorize_nearest_investigation.kv3"
									name = "MemorizeNearestInvestigation"
								},
								// memorize incoming grenades
								{
									type = "subtree"
									file = "scripts/ai/botComp/Grenades_/bt_memorize_area_damage_grenades.kv3"
									name = "MemorizeAreaDamageGrenades"
								},
								{
									type = "subtree"
									file = "scripts/ai/botComp/Grenades_/bt_memorize_area_damage_infernos.kv3"
									name = "MemorizeInfernoDamage"
								},
								// memorize incoming damage
								{
									type = "subtree"
									file = "scripts/ai/botComp/Memory_/bt_memorize_damage.kv3"
									name = "MemorizeDamage"
								},
								// memorize threats
								{
									type = "subtree"
									file = "scripts/ai/botComp/Memory_/bt_memorize_threats.kv3"
									name = "MemorizeThreats"
								},
								// memorize whether we're standing on damaging area
								{
									type = "subtree"
									file = "scripts/ai/botComp/Grenades_/bt_memorize_area_damage_current.kv3"
									name = "MemorizeAreaDamageCurrent"
								}
							]
						}
					},
					{
						type = "decorator_repeat"
						child =
						{
							type = "selector"
							children =
							[
								// PHASING: BUY IF HAVE TO
								{
									type = "condition_is_empty"
									input = "ShouldBuy"
									negated = 1
									child =
									{
										// sequencer: evaluate first to last child, in order
										type = "sequencer"
										children =
										[
											{
												type = "action_wait"
												wait_time_min = 3
												wait_time_max = 5
											},
											{
												type = "action_buy"
											},
											{
												type = "decorator_remove_key"
												input = "ShouldBuy"
											}
										]
									}
								},
								
								{
									type = "subtree"
									file = "scripts/ai/botComp/Movement_/bt_attack.kv3"
									name = "Attack"
								},
								
								{
									type = "decorator_sensor"
									entity_type_filter = "DAMAGE"
									output = "Damage"
									priority = 0
									child =
									{
										type = "condition_is_empty"
										input = "Damage"
										negated = 1
										child =
										{
											type = "action_aim"
											input = "Damage"
											acquire_only = 0
										}
									}
								},
								
								{
									type = "subtree"
									file = "scripts/ai/botComp/Memory_/bt_investigate_closest_memorized_event.kv3"
									name = "InvestigateClosestMemorizedEvent"
								},
								
								{
									type = "parallel"
									children =
									[
										{
											type = "subtree"
											file = "scripts/ai/botComp/Movement_/bt_flee_area_damage_threats.kv3"
											name = "FleeAreaDamageThreats"
										},
										
										{
											type = "decorator_repeat"
											child =
											{
												type = "subtree"
												file = "scripts/ai/botComp/Movement_/bt_look_around.kv3"
												name = "LookAround"
											}
										}
									]
								},
								
								{
									type = "subtree"
									file = "scripts/ai/botComp/Movement_/bt_attack_damage_inflictor_smoke.kv3"
									name = "AttackDamageInflictorSmoke"
								},
								
								/***
								{
									type = "subtree"
									file = "scripts/ai/botComp/Movement_/bt_face_damage_inflictor.kv3"
									name = "FaceDamageInflictor"
								},
								***/
								
								{
									type = "subtree"
									file = "scripts/ai/botComp/Movement_/bt_clear_threats_within_fov.kv3"
									name = "ClearThreatsWithinFov"
								},
								
								{
									type = "subtree"
									file = "scripts/ai/botComp/Movement_/bt_select_nearby_threat.kv3"
									name = "SelectNearbyThreat"
								},
								
								{
									type = "decorator_sensor"
									shape =
									{
										type = "sensor_shape_sphere"
										radius = 10
									}
									entity_type_filter = "PLAYERS"
									output = "team_terrorist"
									team_filter = "TERRORIST"
									priority = 0
									child =
									{
										type = "condition_is_empty"
										input = "team_terrorist"
										negated = 1
										child =
										{
											type = "subtree"
											file = "scripts/ai/botComp/Bomb_/bt_pickup_bomb_if_nearby.kv3"
											name = "PickupTheBomb"
										}
									}
								},
								
								{
									type = "condition_owns_item"
									item = "weapon_c4"
									child =
									{
										type = "sequencer"
										children =
										[
											{
												type = "action_equip_weapon"
												weapon = "BEST"
											},
											{
												type = "subtree"
												file = "scripts/ai/botComp/Bomb_/bt_plant_bomb_if_owned.kv3"
												name = "PlantIfOwned"
											},
										]
									}
								},
								
								{
									type = "subtree"
									file = "scripts/ai/botComp/Bomb_/bt_plant_bomb_if_covered.kv3"
									name = "PlantIfCovered"
								},
								
								{
									type = "decorator_sensor"
									shape =
									{
										type = "sensor_shape_sphere"
										radius = 10
									}
									entity_type_filter = "PLAYERS"
									output = "team_terrorist"
									team_filter = "TERRORIST"
									priority = 0
									child =
									{
										type = "condition_is_empty"
										input = "team_terrorist"
										negated = 1
										child =
										{
											type = "subtree"
											file = "scripts/ai/botComp/Bomb_/bt_defend_bomb.kv3"
											name = "DefendTheBomb"
										}
									}
								},
								
								{
									type = "decorator_sensor"
									shape =
									{
										type = "sensor_shape_sphere"
										radius = 10
									}
									entity_type_filter = "PLAYERS"
									output = "team_CT"
									team_filter = "CT"
									priority = 0
									child =
									{
										type = "condition_is_empty"
										input = "team_CT"
										negated = 1
										child =
										{
											type = "subtree"
											file = "scripts/ai/botComp/Bomb_/bt_defuse_bomb.kv3"
											name = "DefuseBomb"
										}
									}
								},
								
								{
									type = "sequencer"
									children =
									[
										{
											type = "decorator_random_int"
											min = 0
											max = 1
											output = "BombSiteIndex"
											child =
											{
												type = "action_choose_bomb_site_area"
												input = "BombSiteIndex"
												output = "BombSiteArea"
											}
										},
										{
											type = "action_choose_random_waypoint"
											input = "BombSiteArea"
											output = "TargetArea"
										},
										{
											type = "action_move_to"
											destination = "TargetArea"
											movement_type = "BT_ACTION_MOVETO_RUN"
											route_type = "BT_ACTION_MOVETO_FASTEST_ROUTE"
											hiding_spot = "HidingSpot"
											threat = "NearestThreatMemory"
										},
										{
											type =	"parallel"
											children =
											[
												{
													type = "action_wait"
													movement_type = "HOLD_POSITION"
													wait_time_min = 3
													wait_time_max = 8
												},
												{
													type = "subtree"
													file = "scripts/ai/botComp/Movement_/bt_clear_threats_within_fov.kv3"
													name = "ClearThreatsWithinFov"
												},
												{
													type = "subtree"
													file = "scripts/ai/botComp/Movement_/bt_select_nearby_threat.kv3"
													name = "SelectNearbyThreat"
												},
												{
													type = "subtree"
													file = "scripts/ai/botComp/Movement_/bt_look_around.kv3"
													name = "LookAround"
												},
											]
										}
									]
								}
							]
						}
					}
				]
			}
		}
	}
}
